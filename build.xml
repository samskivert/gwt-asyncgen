<?xml version="1.0"?>
<project xmlns:ivy="antlib:org.apache.ivy.ant" name="gwt-asyncgen" default="compile" basedir=".">
  <!-- things you may want to change -->
  <property name="app.name"         value="gwt-asyncgen"/>
  <property name="doc.packages"     value="com.samskivert.asyncgen.*"/>
  <property name="doc.overview"     value="com/samskivert/asyncgen/overview.html"/>
  <property name="copyright.holder" value="Michael Bayne"/>

  <!-- the next release version -->
  <property name="revision" value="1.0"/>

  <!-- things you probably don't want to change -->
  <property name="src.dir"     value="src/main/java"/>
  <property name="deploy.dir"  value="dist"/>
  <property name="classes.dir" value="${deploy.dir}/classes"/>
  <property name="javadoc.dir" value="${deploy.dir}/docs"/>

  <!-- downloads ivy if necessary and sets everything up -->
  <property name="ivy.vers" value="2.1.0-rc2" />
  <property name="ivy.jar.dir" value="${user.home}/.ant/lib" />
  <condition property="ivy.exists"><available file="${ivy.jar.dir}/ivy.jar"/></condition>
  <target name="-download-ivy" unless="ivy.exists">
    <mkdir dir="${ivy.jar.dir}"/>
    <get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.vers}/ivy-${ivy.vers}.jar" 
         dest="${ivy.jar.dir}/ivy.jar" usetimestamp="true"/>
  </target>
  <target name="-init-ivy" depends="-download-ivy">
    <path id="ivy.lib.path"><fileset dir="${ivy.jar.dir}" includes="*.jar"/></path>
    <taskdef resource="org/apache/ivy/ant/antlib.xml"
             uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    <ivy:cachepath pathid="compile.classpath" conf="compile" log="download-only"/>
    <ivy:cachepath pathid="test.classpath" conf="test" log="download-only"/>
  </target>

  <!-- prepares the application directories -->
  <target name="-prepare" depends="-init-ivy">
    <mkdir dir="${deploy.dir}"/>
    <mkdir dir="${deploy.dir}/jar"/>
    <mkdir dir="${deploy.dir}/source"/>
    <mkdir dir="${deploy.dir}/javadoc"/>
    <mkdir dir="${classes.dir}"/>
    <mkdir dir="${javadoc.dir}"/>
    <copy todir="${classes.dir}"><fileset dir="src/main/resources" includes="**"/></copy>
  </target>

  <target name="check-ivy" depends="-init-ivy" description="Computes and prints Ivy classpath.">
    <pathconvert pathsep="${line.separator}  " property="compile.str" refid="compile.classpath"/>
    <echo>Compile classpath:</echo>
    <echo>  ${compile.str}</echo>
    <echo>Test classpath:</echo>
    <pathconvert pathsep="${line.separator}  " property="test.str" refid="test.classpath"/>
    <echo>  ${test.str}</echo>
  </target>

  <!-- cleans out the intermediate build files -->
  <target name="clean">
    <delete dir="${classes.dir}"/>
    <delete dir="${deploy.dir}/docs"/>
    <delete failonerror="false"><fileset dir="${deploy.dir}" includes="*.jar"/></delete>
  </target>

  <!-- wipes the entire build directory clean -->
  <target name="distclean">
    <delete dir="${deploy.dir}"/>
  </target>

  <!-- build the java class files -->
  <target name="compile" depends="-prepare">
    <javac srcdir="${src.dir}" destdir="${classes.dir}" includeAntRuntime="false"
           debug="on" optimize="${build.optimize}" source="1.5" target="1.5" encoding="utf-8">
      <classpath refid="compile.classpath"/>
      <compilerarg value="-Xlint"/>
      <compilerarg value="-Xlint:-serial"/>
    </javac>
  </target>

  <!-- build the javadoc documentation -->
  <target name="javadoc" depends="-prepare">
    <javadoc windowtitle="${app.name} API" doctitle="${app.name} API"
             overview="${src.dir}/${doc.overview}"
             destdir="${javadoc.dir}" additionalparam="-breakiterator">
      <classpath refid="compile.classpath"/>
      <packageset dir="${src.dir}"/>
    </javadoc>
    <jar destfile="${deploy.dir}/javadoc/${app.name}.jar" basedir="${javadoc.dir}"/>
  </target>

  <!-- a target for rebuilding everything -->
  <target name="all" depends="clean,compile,javadoc,dist"/>

  <!-- builds our distribution files (war and jar) -->
  <target name="dist" depends="compile">
    <manifest file="${deploy.dir}/MANIFEST.MF">
      <attribute name="Main-Class" value="com.samskivert.asyncgen.AsyncGenTool"/>
    </manifest>
    <jar destfile="${deploy.dir}/jar/${app.name}.jar" basedir="${classes.dir}"
         manifest="${deploy.dir}/MANIFEST.MF"/>
    <jar destfile="${deploy.dir}/source/${app.name}.jar" basedir="${src.dir}"/>
  </target>

  <target name="publish" depends="dist,javadoc" description="Publishes jar to local repository.">
    <ivy:publish resolver="local" pubrevision="${revision}" forcedeliver="true">
      <artifacts pattern="${deploy.dir}/[type]/[artifact].[ext]"/>
    </ivy:publish>
  </target>

  <target name="publish-remote" depends="publish" description="Publishes a public release.">
    <exec executable="svn">
      <arg value="checkout"/>
      <arg value="-N"/>
      <arg value="https://${app.name}.googlecode.com/svn/releases/com.samskivert/${app.name}"/>
      <arg value="temp"/>
    </exec>
    <mkdir dir="temp/${revision}"/>
    <copy todir="temp/${revision}">
      <fileset dir="${user.home}/.ivy2/local/com.samskivert/${app.name}/${revision}">
        <include name="ivys/ivy.jar"/>
        <include name="jars/${app.name}.jar"/>
        <include name="sources/${app.name}.jar"/>
        <include name="javadocs/${app.name}.jar"/>
      </fileset>
    </copy>
    <exec executable="svn">
      <arg value="add"/>
      <arg value="temp/${revision}"/>
    </exec>
    <exec executable="svn">
      <arg value="commit"/>
      <arg value="-m"/>
      <arg value="Published release ${revision}."/>
      <arg value="temp"/>
    </exec>
    <delete dir="temp"/>
  </target>
</project>
